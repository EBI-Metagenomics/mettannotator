/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ebi-metagenomics/mettannotator Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    time   = { check_max( 8.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    withLabel:process_nano {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 1.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }
    withName: GECCO_RUN {
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    }
    withName: SANNTIS {
        cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    }
    withName: PROKKA {
        cpus   = { check_max( 8    * task.attempt, 'cpus'   ) }
        memory = { check_max( 1.GB * task.attempt, 'memory' ) }
    }
    withName: EGGNOG_MAPPER {
        cpus   = { check_max( 16    * task.attempt, 'cpus'   ) }
        memory = { check_max( 50.GB * task.attempt, 'memory' ) }
    }
    withName: INTERPROSCAN {
        cpus   = { check_max( 16    * task.attempt, 'cpus'   ) }
        memory = { check_max( 12.GB * task.attempt, 'memory' ) }
    }
    withName: UNIFIRE {
        cpus   = { check_max( 8                   , 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory' ) }
    }
    withName: DBCAN {
        cpus   = { check_max( 8    * task.attempt, 'cpus'    ) }
        memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    }
}
