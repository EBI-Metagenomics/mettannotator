/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    /*
    ~~~~~~~~~~~~~~~~~~~~~~
            QC
    ~~~~~~~~~~~~~~~~~~~~~~
    */
    withName: QUAST {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/quast" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if ( filename.equals('versions.yml') ) {
                    return null;
                }
                return new File(filename).name;
            }
        ]
        ext.args = { "-l ${meta.prefix}" }
    }

    withName: MULTIQC {
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }


    /*
    ~~~~~~~~~~~~~~~~~~~~~~
        Mobilome
    ~~~~~~~~~~~~~~~~~~~~~~
    */
    withName: CRISPRCAS_FINDER {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/mobilome/crisprcas_finder" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if ( filename.equals('versions.yml') ) {
                    return null;
                }
                return new File(filename).name;
            }
        ]
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~
            RNAs
    ~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: DETECT_TRNA {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/rnas/trna" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if ( filename.equals('versions.yml') ) {
                    return null;
                }
                return new File(filename).name;
            }
        ]
    }

    withName: DETECT_NCRNA {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/rnas/ncrna" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if ( filename.equals('versions.yml') ) {
                    return null;
                }
                return new File(filename).name;
            }
        ]
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~
            BGC
    ~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: ANTISMASH {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/biosynthetic_gene_clusters/antismash" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if ( filename.equals('versions.yml') ) {
                    return null;
                }
                return new File(filename).name;
            }
        ]
    }

    withName: GECCO_RUN {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/biosynthetic_gene_clusters/gecco" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if ( filename.equals('versions.yml') ) {
                    return null;
                }
                def file = new File(filename);
                if ( file.extension == "gff" ) {
                    return "${meta.prefix}_gecco_clusters.gff";
                }
                return new File(filename).name;
            }
        ]
    }

    withName: SANNTIS {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/biosynthetic_gene_clusters/sanntis" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if ( filename.equals('versions.yml') ) {
                    return null;
                }
                return new File(filename).name;
            }
        ]
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~
    Functional annotation
    ~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: UNIFIRE {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/functional_annotation/unifire" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if ( filename.equals('versions.yml') ) {
                    return null;
                }
                return new File(filename).name;
            }
        ]
    }

    withName: EGGNOG_MAPPER {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/functional_annotation/eggnog_mapper" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: INTERPROSCAN {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/functional_annotation/interproscan" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PSEUDOFINDER {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/functional_annotation/pseudofinder" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PSEUDOFINDER_POSTPROCESSING {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/functional_annotation/pseudofinder_processed" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: "PROKKA_STANDARD" {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/functional_annotation/prokka" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if ( filename.equals('versions.yml') ) {
                    return null;
                }
                return new File(filename).name;
            }
        ]
    }

    withName: BAKTA_BAKTA {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/functional_annotation/bakta" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if ( filename.equals('versions.yml') ) {
                    return null;
                }
                return new File(filename).name;
            }
        ]
    }

    withName: DBCAN {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/functional_annotation/dbcan" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if ( filename.equals('versions.yml') ) {
                    return null;
                }
                return new File(filename).name;
            }
        ]
    }

    withName: ANNOTATE_GFF {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/functional_annotation/merged_gff" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if ( filename.equals('versions.yml') ) {
                    return null;
                }
                return new File(filename).name;
            }
        ]
    }

    withName: CIRCOS_PLOT {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/functional_annotation/merged_gff" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if ( filename.equals('versions.yml') ) {
                    return null;
                }
                return new File(filename).name;
            }
        ]
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~
    Antiphage defense
    ~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: DEFENSE_FINDER {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/antiphage_defense/defense_finder" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if ( filename.equals('versions.yml') ) {
                    return null;
                }
                return new File(filename).name;
            }
        ]
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Antimicrobial resistance
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: 'AMRFINDER_PLUS|AMRFINDER_PLUS_TO_GFF' {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/antimicrobial_resistance/amrfinder_plus" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if ( filename.equals('versions.yml') ) {
                    return null;
                }
                return new File(filename).name;
            }
        ]
    }
}
