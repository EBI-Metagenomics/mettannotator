/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${meta.prefix}/${task.process.tokenize(':')[-1].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: QUAST {
       ext.args = { "-l ${meta.prefix}" }
    }

    withName: MULTIQC {
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: ANTISMASH {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/antismash" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> 
                if ( filename.equals('versions.yml') ) {
                    return null;
                }
                return new File(filename).name;
            }
        ]
    }

    withName: CRISPRCAS_FINDER {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/crisprcas_finder" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> 
                if ( filename.equals('versions.yml') ) {
                    return null;
                }
                return new File(filename).name;
            }
        ]
    }

    withName: DETECT_RRNA {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/rnas/rrna" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> 
                if ( filename.equals('versions.yml') ) {
                    return null;
                }
                return new File(filename).name;
            }
        ]
    }

    withName: DETECT_NCRNA {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/rnas/ncrna" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> 
                if ( filename.equals('versions.yml') ) {
                    return null;
                }
                return new File(filename).name;
            }
        ]
    }

    withName: DEFENSE_FINDER {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/defense_finder" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> 
                if ( filename.equals('versions.yml') ) {
                    return null;
                }
                return new File(filename).name;
            }
        ]
    }

    withName: PROKKA {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/prokka" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> 
                if ( filename.equals('versions.yml') ) {
                    return null;
                }
                return new File(filename).name;
            }
        ]
    }

    withName: UNIFIRE {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/unifire" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> 
                if ( filename.equals('versions.yml') ) {
                    return null;
                }
                return new File(filename).name;
            }
        ]
    }

    withName: EGGNOG_MAPPER {
        publishDir = [
            path: { "${params.outdir}/${meta.prefix}/eggnog_mapper" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
