#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright 2024 EMBL - European Bioinformatics Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import argparse
import re


def main(infile, outfile, liftoff_file, field_from, field_to):
    alias_dictionary = load_aliases(liftoff_file, field_from)
    fasta_flag = False
    fields_to_check = return_fields_to_print_to(field_to)
    with open(infile, "r") as file_in, open(outfile, "w") as file_out:
        for line in file_in:
            if line.startswith("#"):
                if line.startswith("##FASTA"):
                    fasta_flag = True
                file_out.write(line)
            elif fasta_flag:
                file_out.write(line)
            else:
                fields = line.strip().split("\t")
                if fields[2] in fields_to_check:
                    attributes_dict = dict(
                        re.split(r"(?<!\\)=", item) for item in re.split(r"(?<!\\);", fields[8])
                    )
                    if fields[2] == "gene":
                        id = attributes_dict["ID"]
                    else:
                        id = attributes_dict["ID"].split(":")[1]
                    if id in alias_dictionary:
                        line = line.strip() + ";{}".format(alias_dictionary[id]) + "\n"
                file_out.write(line)


def return_fields_to_print_to(field_to):
    if field_to == "all":
        return ["CDS", "exon", "mRNA", "gene"]
    else:
        return [field_to]


def load_aliases(liftoff_file, field_from):
    alias_dictionary = dict()
    with open(liftoff_file, "r") as file_in:
        for line in file_in:
            if line.startswith("#"):
                continue
            fields = line.strip().split("\t")
            if fields[1].lower() == "liftoff":
                # Don't use lines that LiftOff added in from the reference
                continue
            if not fields[2] == field_from:
                continue
            attributes_dict = dict(
                re.split(r"(?<!\\)=", item) for item in re.split(r"(?<!\\);", fields[8])
            )
            if "Alias" in attributes_dict:
                alias_dictionary[attributes_dict["ID"]] = "Alias={}".format(
                    attributes_dict["Alias"]
                )
            if "extra_copy_number" in attributes_dict:
                alias_dictionary[
                    attributes_dict["ID"]
                ] += ";extra_copy_number={}".format(
                    attributes_dict["extra_copy_number"]
                )
    return alias_dictionary


def parse_args():
    parser = argparse.ArgumentParser(
        description=(
            "The script transfers the Alias field from the GFF file generated by LiftOff to the  "
            "lines from the annotation GFF and saves the result to a new file."
        )
    )
    parser.add_argument(
        "-i",
        dest="infile",
        required=True,
        help="The path to the input GFF with all annotations in place.",
    )
    parser.add_argument(
        "-o",
        dest="outfile",
        required=True,
        help="Path to the output file where the result will be saved.",
    )
    parser.add_argument(
        "--liftoff",
        required=True,
        help="The path to the GFF file produced by LiftOff.",
    )
    parser.add_argument(
        "--field-from",
        required=False,
        choices=["CDS", "gene"],
        default="gene",
        help="Feature that the alias should be taken from in the liftoff GFF.",
    )
    parser.add_argument(
        "--field-to",
        required=False,
        choices=["CDS", "gene", "all"],
        default="gene",
        help="Feature that the alias should be added to in the final GFF.",
    )
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()
    main(
        args.infile,
        args.outfile,
        args.liftoff,
        args.field_from,
        args.field_to,
    )
