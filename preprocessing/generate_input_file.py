#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright 2024 EMBL - European Bioinformatics Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import argparse
import logging
import os
import sys

logging.basicConfig(level=logging.INFO)


def main(infile, input_dir, bat_dir, outfile, no_prefix):
    all_prefixes = list()
    if not os.path.exists(infile):
        sys.exit("Input file {} does not exist!".format(infile))
    if not os.path.exists(bat_dir):
        sys.exit("BAT directory {} does not exist!".format(bat_dir))
    if not os.path.exists(input_dir):
        sys.exit("Input directory {} does not exist!".format(input_dir))

    with open(infile, "r") as f_in, open(outfile, "w") as f_out:
        f_out.write("prefix,assembly,taxid\n")
        for line in f_in:
            line = line.strip()
            if line.endswith(("gz", "zip")):
                sys.exit(
                    "Fasta file {} is archived. Please provide only unarchived files.".format(
                        line
                    )
                )
            taxid = parse_taxid(line, bat_dir)
            if not no_prefix:
                prefix = os.path.splitext(line)[0]
                if len(prefix) > 24:
                    prefix = prefix[:24]
                if prefix in all_prefixes:
                    sys.exit(
                        "Prefix {} is being used multiple times. Cannot generate output. Either rename the FASTA "
                        "files or run the script with the --no-prefix option to fill them out manually."
                    )
                all_prefixes.append(prefix)
            full_path = os.path.join(input_dir, line)
            if no_prefix:
                f_out.write(",{},{}\n".format(full_path, taxid))
            else:
                f_out.write("{},{},{}\n".format(prefix, full_path, taxid))
    logging.info("Saved results to {}".format(outfile))


def parse_taxid(fasta_file, bat_dir):
    bat_filename = os.path.splitext(fasta_file)[0] + ".bin2classification.txt"
    bat_filepath = os.path.join(bat_dir, bat_filename)
    if not os.path.exists(bat_filepath):
        sys.exit("Bat file {} does not exist!".format(bat_filepath))
    with open(bat_filepath, "r") as f_in:
        # skip header
        f_in.readline()
        taxid_string = f_in.readline().strip().split("\t")[3]
        taxid = find_taxid_without_asterisk(taxid_string)
        if not taxid:
            taxid = "FILL IN MANUALY"
            logging.warning(
                "No taxid found for taxid {}. If taxid is known, fill it out manually in the generated "
                "output file.".format(taxid)
            )
    return taxid


def find_taxid_without_asterisk(input_string):
    elements = input_string.split(";")
    elements.reverse()
    for element in elements:
        if not element.endswith("*"):
            return element
    return None


def parse_args():
    parser = argparse.ArgumentParser(
        description=(
            "The script takes a list of genomes and the taxonomy results generated by BAT and makes a mettannotator "
            "input csv file. "
            "The user has the option to either use the genome file name (minus the extension) as the "
            "prefix for mettannotator or leave the prefix off and fill it out themselves after the script generates "
            "an input file with just the FASTA location and the taxid. It is expected that for all genomes, BAT "
            "results are stored in the same folder and are named as {fasta_base_name}.bin2classification.txt. "
            "The script will use the lowest-level taxid without an asterisk as the taxid for the genome."
        )
    )
    parser.add_argument(
        "-i",
        dest="infile",
        required=True,
        help="A file containing a list of genome files to include (file name only, with file extension, unzipped, "
             "one file per line). ",
    )
    parser.add_argument(
        "-d",
        dest="input_dir",
        required=True,
        help="Full path to the directory where the input FASTA files are located.",
    )
    parser.add_argument(
        "-b",
        dest="bat_dir",
        required=True,
        help="Folder with BAT results. Results for all genomes should be in the same folder and should be named "
        "{fasta_base_name}.bin2classification.txt",
    )
    parser.add_argument(
        "-o",
        dest="outfile",
        required=True,
        help="Path to the file where the output will be saved to.",
    )
    parser.add_argument(
        "--no-prefix",
        dest="no_prefix",
        required=False,
        action="store_true",
        default=False,
        help="Skip prefix generation and leave the first column of the output file empty for the user to fill out. "
        "Defaule: False",
    )
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()
    main(
        args.infile,
        args.input_dir,
        args.bat_dir,
        args.outfile,
        args.no_prefix,
    )
